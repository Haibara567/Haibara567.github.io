<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://haibara567.github.io</id>
    <title>寻找未曾见过的你 • Posts by &#34;java&#34; tag</title>
    <link href="https://haibara567.github.io" />
    <updated>2023-03-26T12:46:25.000Z</updated>
    <category term="java" />
    <category term="3d建模" />
    <category term="XXX" />
    <category term="环境" />
    <category term="实习" />
    <category term="细节问题" />
    <category term="区块链" />
    <category term="数据库" />
    <category term="玩" />
    <category term="博客" />
    <category term="网址" />
    <entry>
        <id>https://haibara567.github.io/2023/03/26/java/JDK%E4%B8%8EJRE%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
        <title>JDK与JRE的区别</title>
        <link rel="alternate" href="https://haibara567.github.io/2023/03/26/java/JDK%E4%B8%8EJRE%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
        <content type="html">&lt;p&gt;JDK 和 JRE 是 Java 开发和运行工具，其中 JDK 包含了 JRE，但是 JRE 是可以独立安装的，它们在 Java 开发和运行的时候起到不同的作用&lt;/p&gt;
&lt;h1 id=&#34;1jdk&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1jdk&#34;&gt;#&lt;/a&gt; 1.JDK&lt;/h1&gt;
&lt;p&gt;​    JDK 是 Java Development Kit 的缩写，是 Java 的开发工具包，主要包含了各种类库和工具，当然也包含了另外一个 JRE.。那么为什么要包含另外一个 JRE 呢？而且 &amp;lt;JDK 安装目录&amp;gt;/JRE/bin 目录下，包含有 server 一个文件夹～包含一个 jvm.dll，这说明 JDK 提供了一个虚拟机。&lt;/p&gt;
&lt;p&gt;​    另外，JDK 的 bin 目录下有各种 Java 程序需要用到的命令，与 JRE 的 bin 目录最明显的区别就是 JDK 文件下才有 javac，这一点很好理解，因为 JRE 只是一个运行环境而已，与开发无关。正因为如此，具备开发功能的 JDK 所包含的 JRE 下才会同时有 server 的 JVM，而仅仅作为运行环境的 JRE 下，只需要 server 的 jvm.dll 就够了。&lt;/p&gt;
&lt;p&gt;注意：JDK 所提供的运行环境和工具度需要进行环境变量的配置以后，才能使用，最主要的配置就是把 &amp;lt;JDK 安装目录&amp;gt;/bin 目录设置为 Path 环境变量值的一部分。&lt;/p&gt;
&lt;h1 id=&#34;2jre&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2jre&#34;&gt;#&lt;/a&gt; 2.JRE&lt;/h1&gt;
&lt;p&gt;​    JRE 是 Java Runtime Environment 的缩写，是 Java 程序的运行环境。既然是运行，当然要包含 JVM，也就是所谓的 Java 虚拟机，还有所以的 Java 类库的 class 文件，都在 lib 目录下，并且都打包成了 jar。&lt;/p&gt;
&lt;p&gt;至于在 Windows 上的虚拟机是哪个文件呢？就是 &amp;lt;JRE 安装目录&amp;gt;/bin/server 中的 jvm.dll。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20160807174832320?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，安装 JRE 的时候安装程序会自动把 JRE 的 java.exe 添加到了系统变量中。系统变量 Path 的最前面有 % SystemRoot% system32;% SystemRoot%; 这样的配置，那样到 Windows/system32 目录下 main 去看看，会发现一个 java.exe 文件。这样就无需配置环境变量，也可以运行 Java 程序了。&lt;/p&gt;
&lt;h1 id=&#34;3jdk与jre的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3jdk与jre的区别&#34;&gt;#&lt;/a&gt; 3.JDK 与 JRE 的区别&lt;/h1&gt;
&lt;p&gt;​    JDK 是 Java 的开发工具，它不仅提供了 Java 程序运行所需的 JRE，还提供了一系列的编译，运行等工具，如 javac，java，javaw 等。JRE 只是 Java 程序的运行环境，它最核心的内容就是 JVM（Java 虚拟机）及核心类库。&lt;/p&gt;
&lt;h1 id=&#34;4tomcat和jdk是什么关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4tomcat和jdk是什么关系&#34;&gt;#&lt;/a&gt; 4.Tomcat 和 JDK 是什么关系&lt;/h1&gt;
&lt;p&gt;tomcat 是 java 的 web 项目运行容器之一；&lt;br&gt;
jdk 是 java 运行环境。也就是说 java 没有 jdk 肯定是没法编译运行的。&lt;br&gt;
java 运行必须依赖于 jdk 环境，但是不一定要用 tomcat 容器，如 WebLogic、WebSphere 等都是可以的。&lt;/p&gt;
</content>
        <category term="java" />
        <updated>2023-03-26T12:46:25.000Z</updated>
    </entry>
    <entry>
        <id>https://haibara567.github.io/2023/03/26/java/spring%E7%AE%80%E4%BB%8B/</id>
        <title>Spring简介</title>
        <link rel="alternate" href="https://haibara567.github.io/2023/03/26/java/spring%E7%AE%80%E4%BB%8B/"/>
        <content type="html">&lt;h1 id=&#34;spring简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring简介&#34;&gt;#&lt;/a&gt; Spring 简介&lt;/h1&gt;
&lt;p&gt;Spring 是一个轻量级 Java 开发框架，最早有 Rod Johnson 创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的 JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发 Java 应用程序提供全面的基础架构支持。Spring 负责基础架构，因此 Java 开发者可以专注于应用程序的开发。&lt;/p&gt;
&lt;p&gt;Spring 最根本的使命是解决企业级应用开发的复杂性，即简化 Java 开发。&lt;/p&gt;
&lt;p&gt;Spring 可以做很多事情，它为企业级开发提供了丰富的功能，但是这些功能的底层都依赖于它的两个核心特性，也就是依赖注入（dependency injection，DI）和面向切面编程（aspect-oriented programming，AOP）。&lt;/p&gt;
&lt;p&gt;为了降低 Java 开发的复杂性，Spring 采取了以下 4 种关键策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 POJO 的轻量级和最小侵入性编程；&lt;/li&gt;
&lt;li&gt;通过依赖注入和面向接口实现松耦合；&lt;/li&gt;
&lt;li&gt;基于切面和惯例进行声明式编程；&lt;/li&gt;
&lt;li&gt;通过切面和模板减少样板式代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;spring框架核心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring框架核心&#34;&gt;#&lt;/a&gt; Spring 框架核心&lt;/h1&gt;
&lt;p&gt;Spring 设计目标：Spring 为开发者提供一个一站式轻量级应用开发平台；&lt;/p&gt;
&lt;p&gt;Spring 设计理念：在 JavaEE 开发中，支持 POJO 和 JavaBean 开发方式，使应用面向接口开发，充分支持 OO（面向对象）设计方法；Spring 通过 IoC 容器实现对象耦合关系的管理，并实现依赖反转，将对象之间的依赖关系交给 IoC 容器，实现解耦；&lt;/p&gt;
&lt;p&gt;Spring 框架的核心：IoC 容器和 AOP 模块。通过 IoC 容器管理 POJO 对象以及他们之间的耦合关系；通过 AOP 以动态非侵入的方式增强服务。&lt;/p&gt;
&lt;h1 id=&#34;spring的优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring的优缺点&#34;&gt;#&lt;/a&gt; Spring 的优缺点&lt;/h1&gt;
&lt;h2 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h2&gt;
&lt;h3 id=&#34;方便解耦简化开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方便解耦简化开发&#34;&gt;#&lt;/a&gt; 方便解耦，简化开发&lt;/h3&gt;
&lt;p&gt;Spring 就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给 Spring 管理。&lt;/p&gt;
&lt;h3 id=&#34;aop编程的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aop编程的支持&#34;&gt;#&lt;/a&gt; AOP 编程的支持&lt;/h3&gt;
&lt;p&gt;Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。&lt;/p&gt;
&lt;h3 id=&#34;声明式事务的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明式事务的支持&#34;&gt;#&lt;/a&gt; 声明式事务的支持&lt;/h3&gt;
&lt;p&gt;只需要通过配置就可以完成对事务的管理，而无需手动编程。&lt;/p&gt;
&lt;h3 id=&#34;方便程序的测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方便程序的测试&#34;&gt;#&lt;/a&gt; 方便程序的测试&lt;/h3&gt;
&lt;p&gt;Spring 对 Junit4 支持，可以通过注解方便的测试 Spring 程序。&lt;/p&gt;
&lt;h3 id=&#34;方便集成各种优秀框架&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方便集成各种优秀框架&#34;&gt;#&lt;/a&gt; 方便集成各种优秀框架&lt;/h3&gt;
&lt;p&gt;Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis 等）。&lt;/p&gt;
&lt;h3 id=&#34;降低javaee-api的使用难度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#降低javaee-api的使用难度&#34;&gt;#&lt;/a&gt; 降低 JavaEE API 的使用难度&lt;/h3&gt;
&lt;p&gt;Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些 API 应用难度大大降低。&lt;/p&gt;
&lt;h2 id=&#34;缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h2&gt;
&lt;p&gt;Spring 明明一个很轻量级的框架，却给人感觉大而全&lt;br&gt;
 Spring 依赖反射，反射影响性能&lt;br&gt;
使用门槛升高，入门 Spring 需要较长时间&lt;br&gt;
 Spring 的应用场景&lt;br&gt;
应用场景：JavaEE 企业应用开发，包括 SSH、SSM 等&lt;/p&gt;
&lt;h2 id=&#34;spring价值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring价值&#34;&gt;#&lt;/a&gt; Spring 价值&lt;/h2&gt;
&lt;p&gt;Spring 是非侵入式的框架，目标是使应用程序代码对框架依赖最小化；&lt;br&gt;
Spring 提供一个一致的编程模型，使应用直接使用 POJO 开发，与运行环境隔离开来；&lt;br&gt;
Spring 推动应用设计风格向面向对象和面向接口开发转变，提高了代码的重用性和可测试性；&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0OTMyODM1L2FydGljbGUvZGV0YWlscy8xMDk2OTQxOTY=&#34;&gt;Springboot 介绍&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="java" />
        <updated>2023-03-26T05:46:25.000Z</updated>
    </entry>
</feed>
