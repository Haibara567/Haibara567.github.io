<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>寻找未曾见过的你 • Posts by &#34;xxx&#34; tag</title>
        <link>https://haibara567.github.io</link>
        <description>吉兆要出现三次，幸运才会降临；谢幕时应当三次鞠躬；而在风来人的剑斗剧中，胜负的对手也有三名。</description>
        <language>zh-CN</language>
        <pubDate>Fri, 17 Mar 2023 22:13:25 +0800</pubDate>
        <lastBuildDate>Fri, 17 Mar 2023 22:13:25 +0800</lastBuildDate>
        <category>XXX</category>
        <category>细节问题</category>
        <category>java</category>
        <category>3d建模</category>
        <category>环境</category>
        <category>博客</category>
        <category>区块链</category>
        <category>实习</category>
        <category>数据库</category>
        <category>玩</category>
        <category>网址</category>
        <item>
            <guid isPermalink="true">https://haibara567.github.io/2023/03/17/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%AC%AC%E4%B8%89%E7%AB%A0/</guid>
            <title>第三章</title>
            <link>https://haibara567.github.io/2023/03/17/%E6%95%B0%E6%8D%AE%E5%BA%93/%E7%AC%AC%E4%B8%89%E7%AB%A0/</link>
            <category>XXX</category>
            <pubDate>Fri, 17 Mar 2023 22:13:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;完整性约束的三个子句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整性约束的三个子句&#34;&gt;#&lt;/a&gt; 完整性约束的三个子句&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主键子句：Primary Key&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;体现实体完整性：取值非空、唯一&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;外键子句: Foreign Key&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;体现参照完整性: References 指出所对应的列名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;检查子句：Check&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用户自定义完整性：指出取值的具体要求&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DISTINCT&lt;/span&gt; Sno &lt;span class=&#34;token keyword&#34;&gt;From&lt;/span&gt; SC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;DISTINCT 的作用是删除重复值&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Select&lt;/span&gt; sno&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;From&lt;/span&gt; SC&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Group&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; sno&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Having&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;where 与 having 的区别在于作用对象不同 where 作用于基本表或视图，选出满足条件的元组；having 作用于组，选择满足条件的组。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://haibara567.github.io/2023/03/17/C/C++%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
            <title>C++实用函数</title>
            <link>https://haibara567.github.io/2023/03/17/C/C++%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/</link>
            <category>XXX</category>
            <pubDate>Fri, 17 Mar 2023 16:18:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;strtok&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#strtok&#34;&gt;#&lt;/a&gt; strtok()&lt;/h1&gt;
&lt;h2 id=&#34;描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#描述&#34;&gt;#&lt;/a&gt; 描述&lt;/h2&gt;
&lt;p&gt;C 库函数 &lt;strong&gt;char *strtok(char *str, const char *delim)&lt;/strong&gt; 分解字符串 &lt;strong&gt;str&lt;/strong&gt; 为一组字符串，&lt;strong&gt;delim&lt;/strong&gt; 为分隔符。&lt;/p&gt;
&lt;h2 id=&#34;声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明&#34;&gt;#&lt;/a&gt; 声明&lt;/h2&gt;
&lt;p&gt;下面是 strtok () 函数的声明。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char *strtok(char *str, const char *delim)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参数&#34;&gt;#&lt;/a&gt; 参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;str&lt;/strong&gt; – 要被分解成一组小字符串的字符串。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;delim&lt;/strong&gt; – 包含分隔符的 C 字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回值&#34;&gt;#&lt;/a&gt; 返回值&lt;/h2&gt;
&lt;p&gt;该函数返回被分解的第一个子字符串，如果没有可检索的字符串，则返回一个空指针。&lt;/p&gt;
&lt;h2 id=&#34;实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例&#34;&gt;#&lt;/a&gt; 实例&lt;/h2&gt;
&lt;p&gt;下面的实例演示了 strtok () 函数的用法。&lt;/p&gt;
&lt;h2 id=&#34;实例-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例-2&#34;&gt;#&lt;/a&gt; 实例&lt;/h2&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;string.h&gt;&lt;/span&gt; &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;This is - www.runoob.com - website&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;token&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;/* 获取第一个子字符串 */&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strtok&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34;&gt;/* 继续获取其他的子字符串 */&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; token &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;%s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; token &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;          &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        token &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strtok&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;让我们编译并运行上面的程序，这将产生以下结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is 
 www.runoob.com 
 website
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;string中c_str-data-copypn函数的用法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#string中c_str-data-copypn函数的用法&#34;&gt;#&lt;/a&gt; string 中 c_str ()、data ()、copy (p,n) 函数的用法&lt;/h1&gt;
&lt;p&gt;标准库的 string 类提供了 3 个成员函数来从一个 string 得到 c 类型的字符数组：c_str ()、data ()、copy (p,n)。&lt;/p&gt;
&lt;h2 id=&#34;c_str生成一个const-char指针指向以空字符终止的数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c_str生成一个const-char指针指向以空字符终止的数组&#34;&gt;#&lt;/a&gt; c_str ()：生成一个 const char * 指针，指向以空字符终止的数组。&lt;/h2&gt;
&lt;p&gt;①这个数组的数据是临时的，当有一个改变这些数据的成员函数被调用后，其中的数据就会失效。因此要么现用先转换，要么把它的数据复制到用户自己可以管理的内存中。注意。看下例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;const char* c;
string s=&amp;quot;1234&amp;quot;;
c = s.c_str(); 
cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; //输出：1234
s=&amp;quot;abcd&amp;quot;;
cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; //输出：abcd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面如果继续用 c 指针的话，导致的错误将是不可想象的。就如：1234 变为 abcd&lt;/p&gt;
&lt;p&gt;其实上面的 c = s.c_str (); 不是一个好习惯。既然 c 指针指向的内容容易失效，我们就应该按照上面的方法，那怎么把数据复制出来呢？这就要用到 strcpy 等函数（推荐）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;//const char* c; //①
//char* c;       //②
//char c[20]; 
char* c=new char[20];
string s=&amp;quot;1234&amp;quot;;
//c = s.c_str(); 
strcpy(c,s.c_str());
cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; //输出：1234
s=&amp;quot;abcd&amp;quot;;
cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; //输出：1234
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：不能再像上面一样①所示了，const 还怎么向里面写入值啊；也不能②所示，使用了未初始化的局部变量 “c”，运行会出错的 。&lt;/p&gt;
&lt;p&gt;② c_str () 返回一个客户程序可读不可改的指向字符数组的指针，不需要手动释放或删除这个指针。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data (): 与 c_str () 类似，但是返回的数组不以空字符终止。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;sort&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sort&#34;&gt;#&lt;/a&gt; sort()&lt;/h1&gt;
&lt;p&gt;对指定范围内元素进行快速排序&lt;/p&gt;
&lt;p&gt;sort 是 STL 自带的系统函数，它的格式是：&lt;/p&gt;
&lt;p&gt;void sort (要排序元素的起始地址，要排序元素的结束地址，比较函数)；&lt;/p&gt;
&lt;p&gt;这里可以省略比较函数，他是默认从小到大排序的（升序排序）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;
int main()
&amp;#123;
	int a[]=&amp;#123;3,5,2,6,9,3,5&amp;#125;;
	sort(a,a+7);//7是数组的元素个数，这里a为数组的开头，a+7就等于排序到数组的第七个元素
	for(int i=0;i&amp;lt;6;i++)
		cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;p&gt;2 3 3 5 5 6&lt;/p&gt;
&lt;p&gt;void sort (要排序元素的起始地址，要排序元素的结束地址，比较函数)；&lt;/p&gt;
&lt;p&gt;这个比较函数的作用就是可以自定义排序方式，比如降序排序。&lt;/p&gt;
&lt;p&gt;定义：bool cmp (int x,int y)…，如果返回 True 那么 x 就排在 y 前面。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;
bool cmp(int x,int y)
&amp;#123;
	if(x&amp;gt;y)return true;//降序
	return false;
&amp;#125;
int main()
&amp;#123;
	int a[]=&amp;#123;3,5,2,6,9,3,5&amp;#125;;
	sort(a,a+7,cmp);//7是数组的元素个数
	for(int i=0;i&amp;lt;6;i++)
		cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;9 6 5 5 3 3&lt;/p&gt;
&lt;h1 id=&#34;map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt; Map&lt;/h1&gt;
&lt;p&gt;map 是 STL 的一个关联容器，它提供一对一的 hash。&lt;/p&gt;
&lt;p&gt;第一个可以称为关键字 (key)，每个关键字只能在 map 中出现一次；&lt;br&gt;
第二个可能称为该关键字的值 (value)；&lt;br&gt;
定义：&lt;br&gt;
map &amp;lt;类型，类型&amp;gt; m;&lt;br&gt;
 举个栗子:&lt;br&gt;
 记录每个人的名字的对应的爱好，张三喜欢吃汉堡：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;map&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;
int main()
&amp;#123;
	map&amp;lt;string,string&amp;gt; m;
	m[&amp;quot;张三&amp;quot;]=&amp;quot;吃汉堡&amp;quot;;
	cout&amp;lt;&amp;lt;&amp;quot;张三: &amp;quot;&amp;lt;&amp;lt;m[&amp;quot;张三&amp;quot;]; 
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;张三：吃汉堡&lt;/p&gt;
&lt;h1 id=&#34;stack栈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#stack栈&#34;&gt;#&lt;/a&gt; stack (栈)&lt;/h1&gt;
&lt;p&gt;头文件:&lt;/p&gt;
&lt;p&gt;#include&lt;stack&gt;&lt;br&gt;
stack 好像还有个翻译叫 “咸鱼”… 嘿嘿。&lt;/stack&gt;&lt;/p&gt;
&lt;p&gt;栈的介绍：&lt;br&gt;
栈就像一个盒子，可以放入或去除元素，但是个人类都知道，要把盒子底下的东西取出来，就必须先取出他上面的东西。&lt;/p&gt;
&lt;p&gt;假如我们把 1、2、3、4、5 按顺序分别入栈：&lt;/p&gt;
&lt;p&gt;栈的定义：&lt;br&gt;
stack &amp;lt;类型 (可以不写)&amp;gt; st;&lt;br&gt;
 或者 stack st;&lt;br&gt;
 很 easy 是不？&lt;/p&gt;
&lt;p&gt;栈的成员函数：&lt;br&gt;
.empty ()	判断栈是否为空，空则返回 true&lt;br&gt;
.pop ()	移除栈顶元素&lt;br&gt;
.push (啥啥啥)	在栈顶增加元素&lt;br&gt;
.size ()	返回栈中元素数目&lt;br&gt;
.top ()	返回栈顶元素&lt;br&gt;
.empty ()  判断栈是否为空。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;stack st;
if(st.empty())//如果是空那么执行下面代码
    ......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;.push (啥啥啥), 在栈顶增加元素。&lt;/p&gt;
&lt;p&gt;.top ()，返回栈顶元素，记住是返回，要单独输出。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;stack&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;
stack&amp;lt;int&amp;gt; st;
int main()&amp;#123;
    st.push(5418);
    cout&amp;lt;&amp;lt;st.top();//输出栈顶元素
    return 0;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出 5418。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;.size (), 返回栈中元素数目。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;stack&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;
stack&amp;lt;int&amp;gt; st;
int main()&amp;#123;
    st.push(5418);
    cout&amp;lt;&amp;lt;st.size();
    return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出 1&lt;/p&gt;
&lt;p&gt;.pop ()，移除栈顶元素：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;stack&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;
stack&amp;lt;int&amp;gt; st;
int main()&amp;#123;
    

    st.push(1452);
    st.push(5418);
    st.pop();
    cout&amp;lt;&amp;lt;st.top();
    
    return 0;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出 1452。&lt;/p&gt;
&lt;p&gt;简单不？&lt;/p&gt;
&lt;h1 id=&#34;二分查找&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二分查找&#34;&gt;#&lt;/a&gt; 二分查找&lt;/h1&gt;
&lt;p&gt;头文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;algorithm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;美妙的函数：&lt;/p&gt;
&lt;h2 id=&#34;1lower_bound函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1lower_bound函数&#34;&gt;#&lt;/a&gt; 1.lower_bound 函数&lt;/h2&gt;
&lt;p&gt;对于有序容器，有序容器，有序容器（重要的事情说三遍）快速二分查找出第一个大于等于&lt;/p&gt;
&lt;p&gt;指定数的位置（下标），如果没有找到，返回最后一个数据后面的位置。&lt;/p&gt;
&lt;p&gt;对于数组，通常的格式为：&lt;/p&gt;
&lt;p&gt;查找的数组下标 = lower_bound (数组要查找的开始位置，数组要查找的结束位置后面，要找的数) – 数组开始位置 (一般写数组名);&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;iostream&amp;gt;

using namespace std;

int main() &amp;#123;

    int a[5] = &amp;#123; 1,2,3,3,8 &amp;#125;;
     
    //从 a 数组中找到第一个不小于   3 的元素
     
    int   index = lower_bound(a, a + 5, 3)-a;//查找的数组下标 = lower_bound(数组要查找的开始位置，数组要查找的结束位置后面，要找的数) – 数组开始位置;
     
    if   (index==5 ) cout &amp;lt;&amp;lt; &amp;quot; not found! &amp;quot;;//index=5，也就是数组末尾的位置。
    else  cout &amp;lt;&amp;lt; index;
     
    return   0;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出 2。&lt;/p&gt;
&lt;h2 id=&#34;2upper_bound函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2upper_bound函数&#34;&gt;#&lt;/a&gt; 2.upper_bound 函数&lt;/h2&gt;
&lt;p&gt;有一个类似 lower_bound 的函数 upper_bound, 快速二分查找出第一个大于指定数的位置（下&lt;/p&gt;
&lt;p&gt;标），如果没有找到，返回最后一个数据后面的位置。&lt;/p&gt;
&lt;p&gt;举个栗子，啊… 快没栗子了。(っ °Д °;) っ&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include&amp;lt;algorithm&amp;gt;
#include&amp;lt;iostream&amp;gt;

using namespace std;

int main() &amp;#123;

    int a[5] = &amp;#123; 1,2,3,3,8 &amp;#125;;
    //从 a 数组中找到第一个大于 3 的元素
     
    int   index = upper_bound(a, a + 5, 3)-a;
     
    if   (index==5 ) cout &amp;lt;&amp;lt; &amp;quot; not found! &amp;quot;;
    else cout &amp;lt;&amp;lt; index;
     
    return   0;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出 4.&lt;/p&gt;
&lt;h2 id=&#34;3binary_search查找数组内某个元素是否出现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3binary_search查找数组内某个元素是否出现&#34;&gt;#&lt;/a&gt; 3.binary_search：查找数组内某个元素是否出现。&lt;/h2&gt;
&lt;p&gt;void binary_search (数组首地址，结束地址，要查找的数)&lt;/p&gt;
&lt;p&gt;返回值为 bool 类型，找到了返回 true。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://haibara567.github.io/2023/03/08/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/%E4%B8%93%E4%B8%9A%E9%97%AE%E9%A2%98/</guid>
            <title>专业问题</title>
            <link>https://haibara567.github.io/2023/03/08/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/%E4%B8%93%E4%B8%9A%E9%97%AE%E9%A2%98/</link>
            <category>XXX</category>
            <pubDate>Wed, 08 Mar 2023 21:46:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数据结构类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据结构类&#34;&gt;#&lt;/a&gt; 数据结构类&lt;/h1&gt;
&lt;h2 id=&#34;b树和b树的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b树和b树的区别&#34;&gt;#&lt;/a&gt; B 树和 B + 树的区别？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;B 树在所有结点都存数据，B + 树只在叶子结点存数据&lt;/li&gt;
&lt;li&gt;B + 树支持遍历叶子结点，B 树不支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;说几种排序的算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#说几种排序的算法&#34;&gt;#&lt;/a&gt; 说几种排序的算法&lt;/h2&gt;
&lt;p&gt;选择、冒泡、插入、快速、堆、归并排序&lt;/p&gt;
&lt;h2 id=&#34;快速排序的思想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速排序的思想&#34;&gt;#&lt;/a&gt; 快速排序的思想？&lt;/h2&gt;
&lt;h2 id=&#34;快速排序在数据基本有序的情况下时间复杂度会达到onn如何改进&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速排序在数据基本有序的情况下时间复杂度会达到onn如何改进&#34;&gt;#&lt;/a&gt; 快速排序在数据基本有序的情况下时间复杂度会达到 O (n*n)，如何改进？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;头、尾、中间三个元素取中间值作为基准元素&lt;/li&gt;
&lt;li&gt;在一次分割结束后，可以把与 Key 相等的元素聚在一起，继续下次分割时，不用再对与 key 相等元素分割&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c中有拷贝构造函数什么时候需要重写拷贝构造函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c中有拷贝构造函数什么时候需要重写拷贝构造函数&#34;&gt;#&lt;/a&gt; C++ 中有拷贝构造函数，什么时候需要重写拷贝构造函数？&lt;/h2&gt;
&lt;p&gt;拷贝构造函数是使用类对象的引用作为参数的构造函数，它能够将参数的属性值拷贝给新的对象，完成新对象的初始化。一般三种情况我们可能需要重写拷贝构造函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用一个对象初始化另一个对象&lt;/li&gt;
&lt;li&gt;对象作为实参传递给参数&lt;/li&gt;
&lt;li&gt;函数返回值为类对象，创建临时对象作为返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是抽象类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是抽象类&#34;&gt;#&lt;/a&gt; 什么是抽象类&lt;/h2&gt;
&lt;p&gt;如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。抽象类不能实例化对象，所以抽象类必须被继承，才能被使用&lt;/p&gt;
&lt;h2 id=&#34;头指针和头结点的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#头指针和头结点的区别&#34;&gt;#&lt;/a&gt; 头指针和头结点的区别&lt;/h2&gt;
&lt;p&gt;头指针是指链表指向第一个结点的指针，若链表有头结点，则是指向头结点的指针&lt;/p&gt;
&lt;p&gt;头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义&lt;/p&gt;
&lt;h2 id=&#34;bfs和dfs的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bfs和dfs的区别&#34;&gt;#&lt;/a&gt; BFS 和 DFS 的区别&lt;/h2&gt;
&lt;p&gt;DFS 使用栈，相当于二叉树的先序遍历&lt;/p&gt;
&lt;p&gt;BFS 使用队列，相当于二叉树的层序遍历&lt;/p&gt;
&lt;h2 id=&#34;什么是稳定的排序算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是稳定的排序算法&#34;&gt;#&lt;/a&gt; 什么是稳定的排序算法&lt;/h2&gt;
&lt;p&gt;序列中，存在多个具有相同的关键字的记录，经过排序，这些记录的相对次序保持不变&lt;/p&gt;
&lt;h2 id=&#34;堆排序的排序过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#堆排序的排序过程&#34;&gt;#&lt;/a&gt; 堆排序的排序过程&lt;/h2&gt;
&lt;h1 id=&#34;操作系统类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统类&#34;&gt;#&lt;/a&gt; 操作系统类&lt;/h1&gt;
&lt;h2 id=&#34;进程的7个状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程的7个状态&#34;&gt;#&lt;/a&gt; 进程的 7 个状态&lt;/h2&gt;
&lt;p&gt;创建、就绪、运行、阻塞、终止、就绪挂起、阻塞挂起&lt;/p&gt;
&lt;h2 id=&#34;操作系统如何实现内存保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统如何实现内存保护&#34;&gt;#&lt;/a&gt; 操作系统如何实现内存保护&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;上、下限寄存器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重定位寄存器&lt;/strong&gt;和&lt;strong&gt;界地址寄存器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程控制块包含哪些信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程控制块包含哪些信息&#34;&gt;#&lt;/a&gt; 进程控制块包含哪些信息&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;进程标识、进程状态、优先级、中断现场、所占资源&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;用户态和内核态之间的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户态和内核态之间的转换&#34;&gt;#&lt;/a&gt; 用户态和内核态之间的转换&lt;/h2&gt;
&lt;p&gt;用户态 ——&amp;gt; 内核态：系统调用、中断、异常、主程序出错&lt;/p&gt;
&lt;p&gt;内核态 ——&amp;gt; 用户态：使用修改 CPU 状态寄存器这一特权指令&lt;/p&gt;
&lt;h2 id=&#34;中断和异常几种情况看一下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#中断和异常几种情况看一下&#34;&gt;#&lt;/a&gt; 中断和异常几种情况看一下&lt;/h2&gt;
&lt;h1 id=&#34;数据库类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库类&#34;&gt;#&lt;/a&gt; 数据库类&lt;/h1&gt;
&lt;h2 id=&#34;mysql中的索引是用什么实现的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mysql中的索引是用什么实现的&#34;&gt;#&lt;/a&gt; Mysql 中的索引是用什么实现的？&lt;/h2&gt;
&lt;p&gt;B 树和 B + 树&lt;/p&gt;
&lt;h2 id=&#34;什么是数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是数据库&#34;&gt;#&lt;/a&gt; 什么是数据库&lt;/h2&gt;
&lt;p&gt;按照数据结构来组织、存储和管理数据的仓库&lt;/p&gt;
&lt;h2 id=&#34;数据库中索引的作用和优缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库中索引的作用和优缺点&#34;&gt;#&lt;/a&gt; 数据库中索引的作用和优缺点&lt;/h2&gt;
&lt;p&gt;为了提高查询速度而对表字段附加的一种标识&lt;/p&gt;
&lt;p&gt;优点是能提高查询的速度&lt;/p&gt;
&lt;p&gt;缺点是会增大数据库的数据量&lt;/p&gt;
&lt;h1 id=&#34;计算机网络类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算机网络类&#34;&gt;#&lt;/a&gt; 计算机网络类&lt;/h1&gt;
&lt;h2 id=&#34;udp的主要特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#udp的主要特点&#34;&gt;#&lt;/a&gt; UDP 的主要特点&lt;/h2&gt;
&lt;p&gt;无连接、尽最大努力交付、没有拥塞控制、首部开销小、支持一对多通信&lt;/p&gt;
&lt;h1 id=&#34;神经网络类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#神经网络类&#34;&gt;#&lt;/a&gt; 神经网络类&lt;/h1&gt;
&lt;h2 id=&#34;深度神经网络为什么要用非线性激活函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#深度神经网络为什么要用非线性激活函数&#34;&gt;#&lt;/a&gt; 深度神经网络为什么要用非线性激活函数&lt;/h2&gt;
&lt;p&gt;如果不用激活函数，每一层输出都是上层输入的线性函数，很容易验证，无论你神经网络有多少层，输出都是输入的线性组合，与没有隐藏层效果相当&lt;/p&gt;
&lt;h2 id=&#34;sigmoid激活函数和softmax激活函数的主要区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sigmoid激活函数和softmax激活函数的主要区别&#34;&gt;#&lt;/a&gt; sigmoid 激活函数和 softmax 激活函数的主要区别&lt;/h2&gt;
&lt;p&gt;softmax 的计算的是一个比重，而 sigmoid 只是对每一个输出值进行非线性化。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://haibara567.github.io/2023/03/08/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/%E8%8B%B1%E8%AF%AD%E9%97%AE%E9%A2%98/</guid>
            <title>英语问题</title>
            <link>https://haibara567.github.io/2023/03/08/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/%E8%8B%B1%E8%AF%AD%E9%97%AE%E9%A2%98/</link>
            <category>XXX</category>
            <pubDate>Wed, 08 Mar 2023 21:46:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;自我介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自我介绍&#34;&gt;#&lt;/a&gt; 自我介绍&lt;/h1&gt;
&lt;p&gt;Good morning. I am glad to be here for this interview. My name is Zhang YunFeng, 22. I come from Xuancheng City, the southeast of Anhui Province. I major in Computer Science and Technology at BeiJing Wuzi University and will graduate here in this coming June. （介绍自己）&lt;/p&gt;
&lt;p&gt;I am open-minded, quick in thought and very fond of new technology. Frequently I exchange with other people by making comments in the forum on line. I’m also with great perseverance. During the days preparing for the first postgraduate examination, I insist on playing badminton once a week. And just owning to this, I can be active and get along well with others. （基本优点 + 大学生活）&lt;/p&gt;
&lt;p&gt;After four year’s learning, I am deeply attracted by the dynamic and positive atmosphere of our major. So I hope to pursue advanced study to broaden my horizon. And I truly believe, I can be a better person after three year’s learning, of course, if I’m lucky enough to be admitted to the &lt;strong&gt;Beijing Institute of Technology&lt;/strong&gt;**.** （报考学校的理由）&lt;/p&gt;
&lt;p&gt;I always believe that one will easily lag behind unless he keeps on learning. Therefore, During my postgraduate study, study and scientific research will be my first priority. I hope I can form a systematic view of computer science and technology and make a solid foundation for future study. I would be very honored if I can do any little contribution in this field. （生涯规划）&lt;/p&gt;
&lt;p&gt;That’s all about my self introduction, thank you!&lt;/p&gt;
&lt;h1 id=&#34;introduce-my-hometown介绍家乡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#introduce-my-hometown介绍家乡&#34;&gt;#&lt;/a&gt; Introduce my hometown 介绍家乡&lt;/h1&gt;
&lt;p&gt;I am from a famous city with a long history over 2,000 years. It is called “Xuancheng ”. Xuancheng City is located in the southeast of Anhui Province. It is a thousand year county prefecture with a long history. It has been called Xuancheng County, Xuanzhou and Ningguo Prefecture successively. Known as “Xuancheng ancient poet land”, “Shangjiang humanities flourishing capital Xuancheng” said; Jingting Mountain is known as the “No.1 Poetry Mountain in the South of the Yangtze River”. I think the city really deserves it. Li Bai visited Xuancheng seven times and left more than 80 poems. Visitors at home and abroad feel it comfortable visiting here. There is my beloved hometown.&lt;/p&gt;
&lt;h1 id=&#34;why-do-you-choose-to-further-study-instead-of-going-to-work-after-graduation为什么考研&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#why-do-you-choose-to-further-study-instead-of-going-to-work-after-graduation为什么考研&#34;&gt;#&lt;/a&gt; Why do you choose to further study instead of going to work after graduation? 为什么考研？&lt;/h1&gt;
&lt;p&gt;Firstly, I am very interested in my major, and I think what I have learned during the undergraduate period is not deep enough. I want to learn more professional knowledge and further improve myself through the three-year postgraduate study.&lt;/p&gt;
&lt;p&gt;Then, my performance in the college entrance examination is not very ideal, and I want to be admitted to a better school to prove my ability&lt;/p&gt;
&lt;p&gt;In a word, I look forward to laying a solid foundation for my future career after completing my studies here.&lt;/p&gt;
&lt;h1 id=&#34;introduce-your-favorite-sportintroduce-your-hobby&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#introduce-your-favorite-sportintroduce-your-hobby&#34;&gt;#&lt;/a&gt; Introduce your favorite sport/Introduce your hobby&lt;/h1&gt;
&lt;p&gt;My favorite sport is playing badminton. Playing badminton needs the cooperation of eyes, hands and feet.During the days preparing for the first postgraduate examination, I insist on playing badminton once a week. Through playing badminton, I developed my team spirit and learned how to cooperate with others to win games. It also improves my communication skills, enables me to get a good interpersonal relationship, and can prevent myopia, which is also good for cervical spine.&lt;/p&gt;
&lt;h1 id=&#34;introduce-my-family介绍家庭&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#introduce-my-family介绍家庭&#34;&gt;#&lt;/a&gt; Introduce my family 介绍家庭&lt;/h1&gt;
&lt;p&gt;​    In my family, there are three members, my father, my mother and me. My parents are workers, my father works very hard, he is always busy, so most of the housework is done by my mother, of course, when I am at home, I will help her. When I make a success, they are more excited than me, and support me to do better. Even though I failed, instead of blaming, they always share sorrow with me, and encourage me not to give up. So I will do all what I can to repay them.&lt;/p&gt;
&lt;h1 id=&#34;introduce-my-school介绍学校&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#introduce-my-school介绍学校&#34;&gt;#&lt;/a&gt; Introduce my school 介绍学校&lt;/h1&gt;
&lt;p&gt;My university, Beijing Wuzi University, is located in Beijing, the capital of China. It is a university characterized by logistics and circulation, based on economics and centered on management. Founded in 1980, it has been subordinate to the State General Administration of Materials, the Ministry of Materials and the Ministry of Domestic Trade. The university offers 28 undergraduate programs and 17 authorized disciplines for master’s degrees. In April 2022, the Youth League Committee of Beijing Materials University was honored as the “Beijing May 4th Red Flag Youth League Committee”.&lt;/p&gt;
&lt;p&gt;我的学校是北京物资学院，坐落于中国首都北京市，是一所以物流和流通为特色，以经济学科为基础，以管理学科为主干的大学。它于 1980 年建校，先后隶属于国家物资总局、物资部、国内贸易部。学校开设 28 个本科专业，拥有 17 个硕士授权学科。2022 年 4 月，北京物资学院团委被表彰为 “北京市五四红旗团委”。&lt;/p&gt;
&lt;h1 id=&#34;talk-about-your-favorite-courses谈谈你最喜欢的课程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#talk-about-your-favorite-courses谈谈你最喜欢的课程&#34;&gt;#&lt;/a&gt; Talk about your favorite courses 谈谈你最喜欢的课程&lt;/h1&gt;
&lt;p&gt;My favorite course is data structures. Data structure can let us understand the characteristics of computer processing objects, the actual problem involved in the processing objects expressed in the computer and to deal with them. At the same time, I also learned many commonly used algorithms, from which I improved my comprehensive application ability and professional quality.&lt;/p&gt;
&lt;p&gt;我最喜欢的课程是数据结构。数据结构能够让我们了解计算机处理对象的特性，将实际问题中所涉及的处理对象在计算机中表示出来并对它们进行处理。与此同时，我还学习了很多常用的算法，从中提高了综合应用能力和专业素质。&lt;/p&gt;
&lt;h1 id=&#34;what-is-artificial-intelligence什么是人工智能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#what-is-artificial-intelligence什么是人工智能&#34;&gt;#&lt;/a&gt; What is Artificial Intelligence 什么是人工智能&lt;/h1&gt;
&lt;p&gt;Artificial intelligence is a branch of computer science that attempts to understand the nature of intelligence and produce new kinds of intelligent machines that can react in a similar way to human intelligence. The main goal is to make machines capable of complex tasks that would normally require human intelligence.&lt;/p&gt;
&lt;p&gt;人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器。其主要目标是使机器能够胜任一些通常需要人类智能才能完成的复杂工作&lt;/p&gt;
&lt;h1 id=&#34;difference-between-recursion-and-iteration&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#difference-between-recursion-and-iteration&#34;&gt;#&lt;/a&gt; Difference between recursion and iteration&lt;/h1&gt;
&lt;p&gt;Recursion is the program calling itself&lt;/p&gt;
&lt;p&gt;Iteration is to make use of the known variable value and get the new variable value according to the recursion formula&lt;/p&gt;
&lt;p&gt;递归就是指程序调用自身&lt;/p&gt;
&lt;p&gt;迭代是利用已知的变量值，根据递推公式不断演进得到变量新值&lt;/p&gt;
&lt;h1 id=&#34;也会找英语小短文看过之后翻译&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#也会找英语小短文看过之后翻译&#34;&gt;#&lt;/a&gt; 也会找英语小短文，看过之后翻译&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://haibara567.github.io/2023/03/08/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98/</guid>
            <title>项目问题</title>
            <link>https://haibara567.github.io/2023/03/08/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E8%AF%95/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98/</link>
            <category>XXX</category>
            <pubDate>Wed, 08 Mar 2023 21:46:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;springboot的优势&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#springboot的优势&#34;&gt;#&lt;/a&gt; Springboot 的优势&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过简化配置可以快速搭建 Spring 应用程序。&lt;/li&gt;
&lt;li&gt;内嵌 servlet 容器，能够直接使用 java 的 main 方法启动，因此也不需要部署 war 包文件。&lt;/li&gt;
&lt;li&gt;提供 starter 简化 Maven 配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;有监督学习和无监督学习的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#有监督学习和无监督学习的区别&#34;&gt;#&lt;/a&gt; 有监督学习和无监督学习的区别&lt;/h1&gt;
&lt;p&gt;有监督：通过已有的训练样本（即已知数据及其对应的输出）去训练得到一个最优模型&lt;/p&gt;
&lt;p&gt;无监督：由输入数据中学到或建立一个模型，并依此模式推测新的结果。输入数据没有被标记，也没有确定的结果。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
